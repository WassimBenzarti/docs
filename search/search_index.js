var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"The Gowebly CLI","text":"<p>A next-generation CLI tool for easily build amazing web applications with Go on the backend, using htmx &amp; hyperscript and the most popular atomic/utility-first CSS frameworks on the frontend.</p>"},{"location":"index.html#features","title":"Features","text":"<ul> <li>100% free and open source under the Apache 2.0 license;</li> <li>For any level of developer's knowledge and technical expertise;</li> <li>Well-documented, with a lot of tips and assists from the authors;</li> <li>Cross-platform and multi-architecture allows successful running on GNU/Linux, MS Windows (including WSL) and Apple macOS;</li> <li>Smart CLI that does most of the routine setup and preparation for production;</li> <li>Helps to get into the Go + htmx + hyperscript technology stack faster;</li> <li>Supports the most popular Go web frameworks out of the box, such as Fiber, Gin, Echo, Chi and HttpRouter;</li> <li>Supports the way web applications are developed using the Templ templating engine with hot-reloading;</li> <li>The possibility of simply adding a ready-to-use and completely customized atomic/utility-first CSS framework to your project;</li> <li>Ready to install as PWA (Progressive Web App) in your browser or mobile device;</li> <li>Supports live-reloading mode for your CSS styles;</li> <li>Has a library of user-friendly helpers for your Go code;</li> <li>Contains a comprehensive example of how to use it out of the box.</li> </ul>"},{"location":"complete-user-guide/index.html","title":"Complete user guide","text":"<p>This section contains detailed instructions on how to use all the features of the Gowebly CLI.</p>"},{"location":"complete-user-guide/index.html#from-the-beginning","title":"From the beginning","text":"<p>We always treasure your time and want you to start building really great web products on this awesome technology stack as soon as possible! Therefore, to get a complete guide to use and understand the basic principles of the Gowebly CLI, we have prepared a comprehensive explanation of the project in this Complete user guide.</p> <p>We have taken care to make it as comfortable as possible for you to learn this wonderful tool, so each CLI command has a sufficient textual description, as well as a visual diagram of how it works.</p> <p>Hope you find answers to all of your questions! </p> <p>Can't find the answer?</p> <p>If you can't find the answer to your question here, feel free to create an issue in the Gowebly CLI repository or send a PR to the Gowebly Docs repository.</p>"},{"location":"complete-user-guide/index.html#the-learning-path","title":"The learning path","text":"<p>It is highly recommended to start exploring with a short introductory article \"How does it work?\" to understand the basic principle and the main components built into the Gowebly CLI.</p> <p>Next steps are:</p> <ul> <li> Install the CLI to your system</li> <li> Configure your project</li> <li> Start creating a new project</li> <li> Running your project locally</li> <li> Build your project for the production</li> </ul>"},{"location":"complete-user-guide/build-your-project/index.html","title":"Build your project","text":"<p>Using a default config</p> <p>If you don't run <code>init</code> command to create a config file (<code>.gowebly.yml</code>), the Gowebly CLI builds your project with a default configuration.</p> <p>To prepare your project to the production, execute the <code>build</code> command:</p>  CLIGoDocker <pre><code>gowebly build [OPTION]\n</code></pre> <pre><code>go run github.com/gowebly/gowebly@latest build [OPTION]\n</code></pre> <pre><code>docker run --rm -it -v ${PWD}:${PWD} -w ${PWD} gowebly/gowebly:latest build [OPTION]\n</code></pre> <p>Possible options:</p> Option Description Is required? <code>--skip-docker</code> CLI skips a generation process for the Docker files <p></p>"},{"location":"complete-user-guide/build-your-project/index.html#what-cli-does-for-you","title":"What CLI does for you?","text":"<p>Every time you execute the <code>build</code> command for a project, the Gowebly CLI does the following under the hood:</p> Step Description Is async? 1 CLI validates the config and applies it to the current project 2 CLI prepares the Docker files for your project 2.1 If <code>--skip-docker</code> option is not set, CLI generates the needed Docker files (<code>docker-compose.yml</code> and <code>Dockerfile</code>) 3 CLI prepares the frontend part of your project 3.1 CLI runs a <code>build:prod</code> script from the <code>package.json</code> file with the chosen JavaScript runtime environment 4 CLI downloads minimized versions of htmx and hyperscript from the trusted unpkg.com CDN <p>Asynchronous steps</p> <p>The Gowebly CLI runs all blocks with asynchronous steps in individual goroutines. Therefore, building your project is several times faster than if you start each step one after another.</p>"},{"location":"complete-user-guide/build-your-project/index.html#diagram","title":"Diagram","text":"<p>For visualization of the Gowebly CLI workflow, check the diagram:</p> <pre><code>stateDiagram-v2\n    Validation: Config validation\n    Docker: Generate Docker files\n    Frontend: Prepare frontend part\n    Downloading: Downloading scripts\n    Goroutines: Individual goroutines\n    direction LR\n    [*] --&gt; Validation\n    Validation --&gt; Goroutines\n    state Goroutines {\n        direction LR\n        Docker\n        Frontend\n        Downloading\n    }\n    Goroutines --&gt; [*]</code></pre>"},{"location":"complete-user-guide/build-your-project/index.html#project-structure-after-building","title":"Project structure after building","text":"<p>Typically, after running the <code>build</code> command, the project structure looks like this:</p> <pre><code>.\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 static\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 handlers.go\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 server.go\n</code></pre>"},{"location":"complete-user-guide/build-your-project/index.html#docker-compose","title":"Docker Compose","text":"<p>The Gowebly CLI generates the <code>docker-compose.yml</code> file for you with the following settings:</p> docker-compose.yml<pre><code>version: '3.8'\n\nservices:\n  gowebly_default: #(1)!\n    build:\n      context: .\n      dockerfile: Dockerfile\n    restart: unless-stopped\n    ports:\n      - '7000:7000'\n    environment:\n      BACKEND_PORT: 7000 #(2)!\n      BACKEND_READ_TIMEOUT: 5\n      BACKEND_WRITE_TIMEOUT: 10\n    networks:\n      - gowebly_default_network\n\nnetworks:\n  gowebly_default_network: #(3)!\n</code></pre> <ol> <li>The <code>_default</code> suffix will be updated by name of the chosen Go framework.</li> <li>The backend port should be the same as the exposed container port (by default, <code>7000</code>).</li> <li>The <code>_default_</code> middle part will be updated by name of the chosen Go framework.</li> </ol>"},{"location":"complete-user-guide/build-your-project/index.html#dockerfile","title":"Dockerfile","text":"<p>The Gowebly CLI generates the <code>Dockerfile</code> file for you with the following settings:</p> Without template enginesUsing Templ Dockerfile<pre><code>FROM golang:1.21-alpine AS builder\n\nWORKDIR /build\n\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY . .\n\nENV CGO_ENABLED=0\nRUN go build -ldflags=\"-s -w\" -o gowebly_default ./...\n\nFROM scratch\n\nCOPY --from=builder /build/static /static\nCOPY --from=builder /build/gowebly_default /\nCOPY --from=builder /build/templates /templates\n\nENTRYPOINT [\"/gowebly_default\"]\n</code></pre> Dockerfile<pre><code>FROM golang:1.21-alpine AS builder\n\nWORKDIR /build\n\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY . .\n\nENV CGO_ENABLED=0\nRUN go build -ldflags=\"-s -w\" -o gowebly_default ./...\n\nFROM scratch\n\nCOPY --from=builder /build/static /static\nCOPY --from=builder /build/gowebly_default /\n#(1)!\n\nENTRYPOINT [\"/gowebly_default\"]\n</code></pre> <ol> <li>When you use the Templ templating engine, you no longer need to include the <code>./templates</code> folder in your container. All templates are regular Go functions and will be automatically included in the build of your application.</li> </ol>"},{"location":"complete-user-guide/configuration/index.html","title":"Configuration","text":"<p>We recommend creating a config file before starting a new project.</p> <p>You can do this by using the built-in <code>init</code> command:</p>  CLIGoDocker <pre><code>gowebly init\n</code></pre> <pre><code>go run github.com/gowebly/gowebly@latest init\n</code></pre> <pre><code>docker run --rm -it -v ${PWD}:${PWD} -w ${PWD} gowebly/gowebly:latest init\n</code></pre> <p></p> <p>This command create a default config file called <code>.gowebly.yml</code> in the current folder with the following settings:</p> .gowebly.yml<pre><code>backend:\n   module_name: project #(1)!\n   go_framework: default #(2)!\n   template_engine: default #(3)!\n   port: 7000 #(4)!\n   timeout:\n      read: 5 #(5)!\n      write: 10 #(6)!\n\nfrontend:\n   package_name: project #(7)!\n   css_framework: default #(8)!\n   runtime_environment: default #(9)!\n   htmx: latest #(10)!\n   hyperscript: latest #(11)!\n</code></pre> <ol> <li>(string) option can be any name of your Go module</li> <li>(string) option can be one of the values: <code>fiber</code>, <code>gin</code>, <code>echo</code>, <code>chi</code>, <code>httprouter</code>, or <code>default</code></li> <li>(string) option can be one of the values: <code>templ</code>, or <code>default</code></li> <li>(int) option can be any port that is not taken up on your system</li> <li>(int) option can be any number of seconds, <code>5</code> is recommended</li> <li>(int) option can be any number of seconds, <code>10</code> is recommended</li> <li>(string) option can be any name of your <code>package.json</code></li> <li>(string) option can be one of the values: <code>tailwindcss</code>, <code>unocss</code>, or <code>default</code></li> <li>(string) option can be one of the values: <code>bun</code>, or <code>default</code></li> <li>(string) option can be any existing version of htmx</li> <li>(string) option can be any existing version of hyperscript</li> </ol> <p>Edit it with your own.</p> <p>Skipping the <code>init</code> command</p> <p>Of course, you can skip this step if you're comfortable with the following default configuration for your new project:</p> <ul> <li>Go module (<code>go.mod</code>) and <code>package.json</code> names are set to project;</li> <li>Without any Go framework for the backend part (only built-in net/http package);</li> <li>With a default template engine (only built-in html/template package);</li> <li>Without any CSS framework for the frontend part (only default styles for the code example);</li> <li>The JavaScript runtime environment for the frontend part is set to Node.js;</li> <li>Server port is <code>7000</code>, timeout (in seconds): <code>5</code> for read, <code>10</code> for write;</li> <li>Latest versions of the htmx &amp; hyperscript.</li> </ul>"},{"location":"complete-user-guide/configuration/index.html#backend","title":"Backend","text":"<p>A required block with backend settings to be used for your project.</p>"},{"location":"complete-user-guide/configuration/index.html#module-name","title":"Module name","text":"<p>The name of the Go module to be used in the <code>go.mod</code> file.</p> <pre><code>backend:\n   module_name: project\n</code></pre> <p>The <code>module_name</code> option can be any string with a simple module name or URL (for example, <code>github.com/user/project</code>).</p> <p>Default value is <code>project</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#go-framework","title":"Go framework","text":"<p>The name of the Go web framework (or router) to use as the backend.</p> <pre><code>backend:\n   go_framework: default\n</code></pre> <p>The <code>go_framework</code> option can be one of the string values:</p> Value Description <code>default</code> Don't use any Go framework (only built-in net/http package) <code>fiber</code> Use the Fiber web framework as a Go backend <code>gin</code> Use the Gin web framework as a Go backend <code>echo</code> Use the Echo web framework as a Go backend <code>chi</code> Use the Chi composable router as a Go backend <code>httprouter</code> Use the HttpRouter high performance router as a Go backend <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#template-engine","title":"Template engine","text":"<p>The name of the template engine to use with the Go web framework.</p> <pre><code>backend:\n   template_engine: default\n</code></pre> <p>The <code>template_engine</code> option can be one of the string values:</p> Value Description <code>default</code> Don't use any template engines (only built-in html/template package) <code>templ</code> Use the Templ template engine <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#server-port","title":"Server port","text":"<p>The port to be used for the Go backend.</p> <pre><code>backend:\n   port: 7000\n</code></pre> <p>The <code>port</code> option can be any positive number.</p> <p>Be careful!</p> <p>The port you define in the configuration should not be taken up on your system.</p> <p>Default value is <code>7000</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#timeout","title":"Timeout","text":"<p>The timeout (in seconds) for the read and write operations for the Go backend.</p> <pre><code>backend:\n   timeout:\n      read: 5\n      write: 10\n</code></pre> <p>The <code>read</code> and <code>write</code> options in the <code>timeout</code> block can be any positive number.</p> <p>Read and write timeouts</p> <p>The recommended values are <code>5</code> for read and <code>10</code> for write. For more information, see this Cloudflare blog post.</p> <p>Default values are <code>5</code> for read and <code>10</code> for write.</p>"},{"location":"complete-user-guide/configuration/index.html#frontend","title":"Frontend","text":"<p>A required block with frontend settings to be used for your project.</p>"},{"location":"complete-user-guide/configuration/index.html#package-name","title":"Package name","text":"<p>The name of the Node.js package to be used in the <code>package.json</code> file.</p> <pre><code>frontend:\n   package_name: project\n</code></pre> <p>The <code>package_name</code> option can be any string with a simple package name (for example, <code>project</code>).</p> <p>Default value is <code>project</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#css-framework","title":"CSS framework","text":"<p>The name of the CSS framework to use for the frontend.</p> <pre><code>frontend:\n   css_framework: default\n</code></pre> <p>The <code>css_framework</code> option can be one of the string values:</p> Value Description <code>default</code> Don't use any CSS framework (only default styles for the code example) <code>tailwindcss</code> Use the Tailwind CSS as a CSS framework <code>unocss</code> Use the UnoCSS as a CSS framework <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#javascript-runtime-environment","title":"JavaScript runtime environment","text":"<p>The name of the JavaScript runtime environment to use for the frontend.</p> <pre><code>frontend:\n   runtime_environment: default\n</code></pre> <p>The <code>runtime_environment</code> option can be one of the string values:</p> Value Description <code>default</code> Use the Node.js as a JavaScript runtime environment <code>bun</code> Use the Bun as a JavaScript runtime environment <p>Default value is <code>default</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#version-of-htmx","title":"Version of htmx","text":"<p>The version of the htmx to use for the frontend.</p> <pre><code>frontend:\n   htmx: latest\n</code></pre> <p>The <code>htmx</code> option can be a string with any existing version or <code>latest</code> (for the latest version).</p> <p>Default value is <code>latest</code>.</p>"},{"location":"complete-user-guide/configuration/index.html#version-of-hyperscript","title":"Version of hyperscript","text":"<p>The version of the hyperscript to use for the frontend.</p> <pre><code>frontend:\n   hyperscript: latest\n</code></pre> <p>The <code>hyperscript</code> option can be a string with any existing version or <code>latest</code> (for the latest version).</p> <p>Default value is <code>latest</code>.</p>"},{"location":"complete-user-guide/create-new-project/index.html","title":"Create a new project","text":"<p>Using a default config</p> <p>If you don't run <code>init</code> command to create a config file (<code>.gowebly.yml</code>), the Gowebly CLI creates a new project with a default configuration.</p> <p>To start a new project, execute the <code>create</code> command:</p>  CLIGoDocker <pre><code>gowebly create\n</code></pre> <pre><code>go run github.com/gowebly/gowebly@latest create\n</code></pre> <pre><code>docker run --rm -it -v ${PWD}:${PWD} -w ${PWD} gowebly/gowebly:latest create\n</code></pre> <p></p>"},{"location":"complete-user-guide/create-new-project/index.html#what-cli-does-for-you","title":"What CLI does for you?","text":"<p>Every time you execute the <code>create</code> command for a project, the Gowebly CLI does the following under the hood:</p> Step Description Is async? 1 CLI validates the config and applies it to the current project 2 CLI generates the structure of your project (folders and files) 3 CLI prepares the backend part of your project 3.1 CLI generates the needed utility files (<code>go.mod</code>, backend files, and so on) 3.2 If <code>template_engine</code> is set to <code>templ</code>, CLI installs Templ to your system and runs <code>templ generate</code> 3.3 CLI runs <code>go mod tidy</code> 4 CLI prepares the frontend part of your project 4.1 CLI generates the <code>styles.css</code> file with minimal styles for the chosen CSS framework 4.2 CLI generates the needed utility files (<code>package.json</code>, config for the chosen CSS framework, and so on) 4.3 CLI runs <code>install</code> and <code>build:dev</code> scripts from the <code>package.json</code> file with the chosen JavaScript runtime environment for the first time 5 CLI downloads minimized versions of htmx and hyperscript from the trusted unpkg.com CDN <p>Asynchronous steps</p> <p>The Gowebly CLI runs all blocks with asynchronous steps in individual goroutines. Therefore, creating a new project is several times faster than if you start each step one after another.</p>"},{"location":"complete-user-guide/create-new-project/index.html#diagram","title":"Diagram","text":"<p>For visualization of the Gowebly CLI workflow, check the diagram:</p> <pre><code>stateDiagram-v2\n    Validation: Config validation\n    Structure: Generate project structure\n    Backend: Prepare backend part\n    Frontend: Prepare frontend part\n    Downloading: Downloading scripts\n    Goroutines: Individual goroutines\n    direction LR\n    [*] --&gt; Validation\n    Validation --&gt; Structure\n    Structure --&gt; Goroutines\n    state Goroutines {\n        direction LR\n        Backend\n        Frontend\n        Downloading\n    }\n    Goroutines --&gt; [*]</code></pre>"},{"location":"complete-user-guide/create-new-project/index.html#project-structure-after-creating","title":"Project structure after creating","text":"<p>Typically, after running the <code>create</code> command, a created project contains the following files and folders:</p> Without template enginesUsing Templ <pre><code>.\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 styles.css\n\u251c\u2500\u2500 static\n\u2502   \u251c\u2500\u2500 favicons\n\u2502   \u2502   \u251c\u2500\u2500 apple-touch-icon.png\n\u2502   \u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u2502   \u251c\u2500\u2500 favicon.png\n\u2502   \u2502   \u251c\u2500\u2500 favicon.svg\n\u2502   \u2502   \u251c\u2500\u2500 manifest-desktop-screenshot.jpeg\n\u2502   \u2502   \u251c\u2500\u2500 manifest-mobile-screenshot.jpeg\n\u2502   \u2502   \u2514\u2500\u2500 manifest-touch-icon.svg\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2502   \u2514\u2500\u2500 logo.svg\n\u2502   \u251c\u2500\u2500 htmx.min.js\n\u2502   \u251c\u2500\u2500 hyperscript.min.js\n\u2502   \u251c\u2500\u2500 styles.css\n\u2502   \u2514\u2500\u2500 manifest.json\n\u251c\u2500\u2500 templates\n\u2502   \u251c\u2500\u2500 pages\n\u2502   \u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 main.html\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 handlers.go\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 server.go\n</code></pre> <p>Auto-generated files</p> <p>Please do not edit <code>*_templ.go</code> Go files in the <code>./templates</code> folder of your project! They're auto-generated by the Templ CLI from <code>*.templ</code> templates.</p> <pre><code>.\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 styles.css\n\u251c\u2500\u2500 static\n\u2502   \u251c\u2500\u2500 favicons\n\u2502   \u2502   \u251c\u2500\u2500 apple-touch-icon.png\n\u2502   \u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u2502   \u251c\u2500\u2500 favicon.png\n\u2502   \u2502   \u251c\u2500\u2500 favicon.svg\n\u2502   \u2502   \u251c\u2500\u2500 manifest-desktop-screenshot.jpeg\n\u2502   \u2502   \u251c\u2500\u2500 manifest-mobile-screenshot.jpeg\n\u2502   \u2502   \u2514\u2500\u2500 manifest-touch-icon.svg\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2502   \u2514\u2500\u2500 logo.svg\n\u2502   \u251c\u2500\u2500 htmx.min.js\n\u2502   \u251c\u2500\u2500 hyperscript.min.js\n\u2502   \u251c\u2500\u2500 styles.css\n\u2502   \u2514\u2500\u2500 manifest.json\n\u251c\u2500\u2500 templates\n\u2502   \u251c\u2500\u2500 pages\n\u2502   \u2502   \u251c\u2500\u2500 index_templ.go\n\u2502   \u2502   \u2514\u2500\u2500 index.templ\n\u2502   \u251c\u2500\u2500 main_templ.go\n\u2502   \u2514\u2500\u2500 main.templ\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 handlers.go\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 server.go\n</code></pre>"},{"location":"complete-user-guide/how-does-it-work/index.html","title":"How does it work?","text":"<p>The Gowebly CLI is built on top of the Go programming language.</p> <p>Therefore, it can run successfully on any supported system and architecture as an executable application. All the templates for the project (both backend and frontend) that it generates as a result of its work are already included in this executable. That is, you do not need any additional files to work with the CLI.</p> <p>A lot of the processes that the CLI runs under the hood are executed in parallel, thanks to goroutines.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#backend-part","title":"Backend part","text":"<p>The templates for the backend part of your project have been thoroughly tested and contain only the features and parameters you need to get started. You can use them as a good start and improve them as your project grows.</p> <p>To be more efficient, the CLI supports the Templ templating engine. With its help, you can rapidly create UIs for your project without leaving the traditional Go environment. All templates are regular Go functions, without having to create additional HTML templates and deal with the built-in Go templating engine (from the <code>html/template</code> package).</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#frontend-part","title":"Frontend part","text":"<p>To create a build for the frontend part, the quick and easy Parcel bundler version <code>2</code> was chosen. This allowed us to reduce the unnecessarily stressful moment of frontend build to the maximum. No more need to understand configurations, the CLI has already prepared it for you.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#javascript-runtime-environment","title":"JavaScript runtime environment","text":"<p>We keep up with the latest updates to frontend development tools, so the CLI supports two JavaScript runtime environments: via the standard Node.js and the new and extremely fast Bun (which is backwards compatible with Node.js). You can choose whichever you like best for your project in the CLI settings.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#htmx-hyperscript","title":"htmx &amp; hyperscript","text":"<p>The CLI also includes an HTTP client that allows background downloading of htmx and hyperscript JavaScript files from a remote CDN for further use in your project.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#deploy","title":"Deploy","text":"<p>To successfully deploy your project to a remote server (or in the cloud), the CLI has pre-prepared Docker files (<code>docker-compose.yml</code> and <code>Dockerfile</code>). They already contain all the settings you need to create an isolated container exactly with your project.</p>"},{"location":"complete-user-guide/how-does-it-work/index.html#conclusion","title":"Conclusion","text":"<p>All of this together gives us the confidence to say that you will enjoy working with the Gowebly CLI, whatever your experience in code and web development! </p>"},{"location":"complete-user-guide/installation/index.html","title":"Installation","text":"<p>The basics for installing the Gowebly CLI on your system are covered in this section.</p>"},{"location":"complete-user-guide/installation/index.html#go","title":"Go","text":"<p>Download and install Go. Version <code>1.21</code> (or higher) is required.</p> <p>Then, use the <code>go install</code> command:</p> <pre><code>go install github.com/gowebly/gowebly@latest\n</code></pre>"},{"location":"complete-user-guide/installation/index.html#docker","title":"Docker","text":"<p>Feel free to using Gowebly CLI from our official Docker image and run it in the isolated container:</p> <pre><code>docker pull gowebly/gowebly:latest\n</code></pre> <p>Limitations of the Docker image</p> <p>This Docker image works only on the GNU/Linux systems (<code>amd64</code> or <code>arm64</code>, including WSL).</p>"},{"location":"complete-user-guide/installation/index.html#homebrew","title":"Homebrew","text":"<p>GNU/Linux and Apple macOS users available way to install Gowebly CLI via Homebrew.</p> <p>Tap a new formula:</p> <pre><code>brew tap gowebly/tap\n</code></pre> <p>Install:</p> <pre><code>brew install gowebly/tap/gowebly\n</code></pre>"},{"location":"complete-user-guide/installation/index.html#manual-mode","title":"Manual mode","text":"<p>Download ready-made <code>exe</code> files for Windows, <code>deb</code>, <code>rpm</code>, <code>apk</code> or Arch Linux packages from the Releases page.</p>"},{"location":"complete-user-guide/run-your-project/index.html","title":"Run your project","text":"<p>Using a default config</p> <p>If you don't run <code>init</code> command to create a config file (<code>.gowebly.yml</code>), the Gowebly CLI runs your project with a default configuration.</p> <p>To run your project in a development mode, execute the <code>run</code> command:</p>  CLIGoDocker <pre><code>gowebly run\n</code></pre> <pre><code>go run github.com/gowebly/gowebly@latest run\n</code></pre> <pre><code>docker run --rm -it -v ${PWD}:${PWD} -w ${PWD} gowebly/gowebly:latest run\n</code></pre> <p></p>"},{"location":"complete-user-guide/run-your-project/index.html#what-cli-does-for-you","title":"What CLI does for you?","text":"<p>Every time you execute the <code>run</code> command for a project, the Gowebly CLI does the following under the hood:</p> Step Description Is async? 1 CLI validates the config and applies it to the current project 2 CLI prepares the backend part of your project 2.1 If <code>template_engine</code> is set to <code>templ</code>, CLI runs <code>templ generate</code> with a <code>--watch</code> option 3 CLI prepares the frontend part of your project 3.1 CLI runs a <code>watch</code> script from the <code>package.json</code> file with the chosen JavaScript runtime environment 4 CLI downloads minimized versions of htmx and hyperscript from the trusted unpkg.com CDN 5 CLI runs your project in a simple <code>go run</code> command and show HTTP logs in the terminal <p>Asynchronous steps</p> <p>The Gowebly CLI runs all blocks with asynchronous steps in individual goroutines. Therefore, preparing to run your project is several times faster than if you start each step one after another.</p>"},{"location":"complete-user-guide/run-your-project/index.html#diagram","title":"Diagram","text":"<p>For visualization of the Gowebly CLI workflow, check the diagram:</p> <pre><code>stateDiagram-v2\n    Validation: Config validation\n    Backend: Prepare backend part\n    Frontend: Prepare frontend part\n    Downloading: Downloading scripts\n    Goroutines: Individual goroutines\n    Run: Run your project\n    direction LR\n    [*] --&gt; Validation\n    Validation --&gt; Goroutines\n    state Goroutines {\n        direction LR\n        Backend\n        Frontend\n        Downloading\n    }\n    Goroutines --&gt; Run\n    Run --&gt; [*]</code></pre>"},{"location":"faq/index.html","title":"FAQ","text":"<p>The most common questions that may come up when using the Gowebly CLI are collected in this section.</p> <p>Can't find the answer?</p> <p>If you can't find the answer to your question here, feel free to create an issue in the Gowebly CLI repository or send a PR to the Gowebly Docs repository.</p>"},{"location":"faq/index.html#what-is-the-right-way-to-ask-a-question-or-report-a-bug","title":"What is the right way to ask a question or report a bug?","text":"<p>First of all, run <code>doctor</code> command to get a list of all the required tools, installed on your system:</p>  CLIGoDocker <pre><code>gowebly doctor\n</code></pre> <pre><code>go run github.com/gowebly/gowebly@latest doctor\n</code></pre> <pre><code>docker run --rm -it -v ${PWD}:${PWD} -w ${PWD} gowebly/gowebly:latest doctor\n</code></pre> <p>Next, open GitHub Issues and follow the instructions.</p> <p>Output of the <code>doctor</code> command</p> <p>Don't forget to include output of the <code>doctor</code> command to the issue description! This is a very helpful information for the debugging process.</p>"},{"location":"faq/index.html#how-to-change-the-default-configuration","title":"How to change the default configuration?","text":"<p>You can change the default configuration in the <code>.gowebly.yml</code> file.</p> <p>Create the <code>.gowebly.yml</code> file in the root of your project:</p>  CLIGoDocker <pre><code>gowebly init\n</code></pre> <pre><code>go run github.com/gowebly/gowebly@latest init\n</code></pre> <pre><code>docker run --rm -it -v ${PWD}:${PWD} -w ${PWD} gowebly/gowebly:latest init\n</code></pre> <p>Change the settings to your needs and <code>create</code>, <code>run</code> or <code>build</code> your project as usual.</p>"},{"location":"faq/index.html#is-it-possible-to-see-a-demonstration-of-how-the-cli-works-without-installation","title":"Is it possible to see a demonstration of how the CLI works without installation?","text":"<p>Yes, of course!  To give you a visual understanding of the project, we have recorded a short demonstration video on YouTube:</p>"},{"location":"faq/index.html#where-else-can-i-read-something-about-the-cli","title":"Where else can I read something about the CLI?","text":"<p>We prepared articles demonstrating the main features and the major updates:</p> <ul> <li> A next-generation CLI tool for building amazing web apps in Go using htmx &amp; hyperscript</li> <li> Big update: the Gowebly CLI now supports Templ</li> </ul> <p>Want to see your article here?</p> <p>If you want to see your article here, feel free to send a PR to the Gowebly Docs repository.</p>"},{"location":"helpers-library/index.html","title":"Helpers library","text":"<p>The Gowebly CLI has a library of user-friendly helpers for your code.</p> <p>This will help you start building beautiful web applications in Go even faster.</p> <p>Install the Gowebly Helpers library as usual:</p> <pre><code>go get -u github.com/gowebly/helpers\n</code></pre> <p>Library usage</p> <p>This library is already included in the Go backend that is created by the <code>create</code> command, but you can use it in other projects as well.</p>"},{"location":"quick-start/index.html","title":"Quick start","text":"<p>First, download and install Go. Version <code>1.21</code> (or higher) is required.</p> <p>Second, run the Gowebly CLI using the <code>go run</code> command to create a new project with the default configuration:</p> <pre><code>go run github.com/gowebly/gowebly@latest create\n</code></pre> <p>Benefits of the <code>go run</code> command</p> <p>With <code>go run</code>, you can use all features of the Gowebly CLI without installation to your system.</p> <p>That's it! </p> <p>A web application has been created in the current folder. It will use the net/http package (as a Go backend) and the html/template package (as a template engine). The htmx and hyperscript packages are already available in your HTML templates.</p>"},{"location":"troubleshooting/index.html","title":"Troubleshooting","text":"<p>The most common malfunctions and problems that may come up when using the Gowebly CLI are collected in this section.</p> <p>Can't find the answer?</p> <p>If you can't find the answer to your question here, feel free to create an issue in the Gowebly CLI repository or send a PR to the Gowebly Docs repository.</p>"},{"location":"troubleshooting/index.html#port-x-is-taken-by-os","title":"Port X is taken by OS","text":"<p>Some operating systems may take up ports that you want to use to develop and deploy your application.</p> <p>You can check if a port is taken by OS by running the command:</p>  GNU/Linux macOS Windows <pre><code>lsof -iTCP -sTCP:LISTEN -P\n</code></pre> <pre><code>lsof -iTCP -sTCP:LISTEN -P\n</code></pre> <pre><code>netstat -aon\n</code></pre> <p>To change the port number, edit the <code>.gowebly.yml</code> file and execute <code>run</code> or <code>build</code> command to apply the changes.</p>"}]}